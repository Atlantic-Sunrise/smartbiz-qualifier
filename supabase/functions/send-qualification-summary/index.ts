
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { Resend } from "npm:resend@1.0.0";

// Initialize Resend with API key from environment variable
const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

// CORS headers for cross-origin requests
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// Handler function for the edge function
const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Starting single qualification email function");
    
    // Parse request body
    const data = await req.json();
    const { email, businessName, score, summary, insights, recommendations, keyNeed } = data;
    
    console.log(`Email request received for: ${email}, business: ${businessName}`);
    
    if (!email) {
      throw new Error("Email address is required");
    }
    
    if (!businessName || score === undefined) {
      throw new Error("Business information is incomplete");
    }

    // Determine score color based on value
    const scoreColor = score >= 80 ? "#34D399" : score >= 60 ? "#FBBF24" : "#EF4444";
    
    // Process insights and recommendations safely
    const insightsList = Array.isArray(insights) 
      ? insights.map(insight => `<li style="margin-bottom: 10px;">${insight}</li>`).join("")
      : "<li>No insights available</li>";
      
    const recommendationsList = Array.isArray(recommendations)
      ? recommendations.map(rec => `<li style="margin-bottom: 10px;">${rec}</li>`).join("")
      : "<li>No recommendations available</li>";

    // Create HTML email content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 650px; margin: 0 auto; padding: 20px; }
          </style>
        </head>
        <body>
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="margin-bottom: 10px;">Lead Qualification Summary</h1>
            <p style="font-size: 16px; color: #666;">Results for ${businessName}</p>
          </div>
          
          <div style="background-color: #f9f9f9; border-radius: 8px; padding: 25px; margin-bottom: 30px; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
              <h2 style="margin: 0; font-size: 22px;">${businessName}</h2>
              <div style="text-align: center;">
                <div style="font-size: 14px; color: #666; margin-bottom: 5px;">Qualification Score</div>
                <div style="background-color: ${scoreColor}; color: white; font-weight: bold; padding: 8px 16px; border-radius: 6px; font-size: 20px;">
                  ${score}/100
                </div>
              </div>
            </div>
            
            ${keyNeed ? `
            <div style="background-color: #F3E8FF; border-radius: 6px; padding: 15px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #7E22CE; font-size: 16px;">Key Business Need: ${keyNeed}</h3>
            </div>
            ` : ''}
            
            <div style="margin-bottom: 25px;">
              <h3 style="border-bottom: 1px solid #ddd; padding-bottom: 10px; font-size: 18px;">Summary</h3>
              <p style="margin-top: 12px; line-height: 1.7;">${summary || "No summary available"}</p>
            </div>
            
            <div style="margin-bottom: 25px;">
              <h3 style="border-bottom: 1px solid #ddd; padding-bottom: 10px; font-size: 18px;">Key Insights</h3>
              <ul style="padding-left: 20px; margin-top: 12px;">
                ${insightsList}
              </ul>
            </div>
            
            <div>
              <h3 style="border-bottom: 1px solid #ddd; padding-bottom: 10px; font-size: 18px;">Recommendations</h3>
              <ul style="padding-left: 20px; margin-top: 12px;">
                ${recommendationsList}
              </ul>
            </div>
          </div>
          
          <div style="text-align: center; color: #666; font-size: 12px; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee;">
            <p>This is an automated qualification summary generated by your lead qualification tool.</p>
          </div>
        </body>
      </html>
    `;

    // Send the email through Resend
    console.log("Sending email to actual recipient");
    
    // PRODUCTION MODE: Use your verified domain and send to the actual recipient
    // Replace "your-domain.com" with your verified domain
    const emailResponse = await resend.emails.send({
      from: "Lead Qualifier <leads@your-domain.com>", // REPLACE with your verified domain
      to: [email], // Send to the actual recipient
      subject: `Lead Qualification for ${businessName}`,
      html: htmlContent,
    });

    console.log("Email sent successfully:", emailResponse);

    return new Response(JSON.stringify({ success: true, data: emailResponse }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });
  } catch (error) {
    console.error("Error in send-qualification-summary function:", error);
    return new Response(
      JSON.stringify({ success: false, error: error.message || "Failed to send email" }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
